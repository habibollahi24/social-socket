// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// هربار این قایل تعییر دادی دستور زیر
// npx prisma generate این فایل به نودماژول اضافه میشه
// npx prisma db push  میریزه تو دیتابیس مثلا سی کیو ال
// npx prisma studio 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// provider     = "mysql"

//userId from clerck
// image url chon mamolan ziade ino mizaran
model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model server discord
// inviteCode is url 
model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @db.Text

  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)
  profileId String

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

//each server have many members and each member has role
//(default)ادمین -مجری - میهمان

enum MemberRole {
  ADMIN
  MODIRATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)
  profileId String

  server   Server @relation(references: [id], fields: [serverId], onDelete: Cascade)
  serverId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

//Channel
// هر شخصی میتونه یه کانال بسازه

enum ChannelType {
  TEXT
  VIDEO
  AUDIO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profile   Profile @relation(references: [id], fields: [profileId], onDelete: Cascade)
  profileId String

  server   Server @relation(references: [id], fields: [serverId], onDelete: Cascade)
  serverId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}
